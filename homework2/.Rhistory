print(gamma_func(15))
}
gamma_func
a
b
gamma_func(2)
gamma_func(0.5)
x <- seq(0, 1, length.out = 3000)
y <- gamma_func(x)
plot(x, y)
x <- seq(0, 3, length.out = 3000)
y <- gamma_func(x)
plot(x, y)
for (i in 1:length(b_grid)) {
b <- b_grid[i]
a <- a_grid[i]
gamma_func <- function(x) dbeta(x = x, shape1 = a, shape2 = b)
int <- 1 - integrate(gamma_func, lower = 0, upper = 75)
}
integrate(gamma_func, lower = 0, upper = 75)
gamma_func
integrate(dbeta, upper = 0, lower = 10000)
integrate(dbeta(shape1 = 1, shape2 = 2), upper = 0, lower = 10000)
int <- 1 - integrate(gamma_func, lower = 0, upper = 75)$value
int
b_grid <- seq(0, 1, length.out = s)
a_grid <- 100 * b_grid^2
res <- c()
for (i in 1:length(b_grid)) {
b <- b_grid[i]
a <- a_grid[i]
gamma_func <- function(x) dbeta(x = x, shape1 = a, shape2 = b)
int <- 1 - integrate(gamma_func, lower = 0, upper = 75)$value
res <- append(res, int)
}
med <- qgamma(0.5, 100*b_grid^2, b_grid)
med
max(med)
which.min(abs(med - 75))
med[754414]
b <- b_grid[which.min(abs(med - 75))]
a <- 100 * b^2
b
a
b_grid <- seq(0.1, 1, by = 0.0001)
med <- qgamma(0.5, 100*b_grid^2, b_grid)
b <- b_grid[which.min(abs(med - 75))]
a <- 100 * b^2
a
b
lambda <- rgamma(1e+10, a, b)
lambda <- rgamma(1e+8, a, b)
length(lambda)
mean(lambda)
lambda <- rgamma(1e+6, a, b)
lambda
mean(lambda > 75)
var(lambda)
b_grid$a_grid
# Approach (1): No integration
b_grid <- seq(0.01, 1, by = 0.0001)
med <- qgamma(0.5, 100*b_grid^2, b_grid)
b <- b_grid[which.min(abs(med - 75))]
a <- 100 * b^2
lambda <- rgamma(1e+6, shape = a, rate = b)
lambda
var(lambda)
mean(lambda > 75)
hist(lambda)
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
lapply(b_grid, function(b) {
a <- 100 * b^2
gamma_dist <- function(t) dgamma(t, a, b)
res <- 1 - integrate(gamma_dist, lower = 0, upper = 75)
return(res)
})
lapply(b_grid, function(b) {
a <- 100 * b^2
gamma_dist <- function(t) dgamma(t, a, b)
res <- 1 - integrate(gamma_dist, lower = 0, upper = 75)$value
return(res)
})
plot(int)
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
int <- lapply(b_grid, function(b) {
a <- 100 * b^2
gamma_dist <- function(t) dgamma(t, a, b)
res <- 1 - integrate(gamma_dist, lower = 0, upper = 75)$value
return(res)
})
plot(int)
int
plot(unlist(int))
int <- sapply(b_grid, function(b) {
a <- 100 * b^2
gamma_dist <- function(t) dgamma(t, a, b)
res <- 1 - integrate(gamma_dist, lower = 0, upper = 75)$value
return(res)
})
int
plot(int)
?integrate
return(1 - integrate(dgamma, shape1 = a, shape2 = b, lower = 0, upper = 75)$value)
int <- sapply(b_grid, function(b) {
a <- 100 * b^2
# Define the gamma dist we're using
return(1 - integrate(dgamma, shape1 = a, shape2 = b, lower = 0, upper = 75)$value)
})
integrate(dgamma, lower= 0 ,upper = 75)
integrate(dgamma, lower= 0 ,upper = 75, shape = a)
integrate(dgamma, lower= 0 ,upper = 75, shape = a, rate = b)
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
int <- sapply(b_grid, function(b) 1 - integrate(dgamma, shape = 100 * b^2, rate = b,lower = 0, upper = 75)$value))
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
int <- sapply(b_grid, function(b) 1 - integrate(dgamma, shape = 100 * b^2, rate = b,lower = 0, upper = 75)$value)
int
plot(int)
int <- sapply(b_grid, function(b) {
1 - integrate(dgamma, shape = 100*b^2, rate = b, lower = 0, upper = 75)
})
1 - integrate(dgamma, shape = 100*b^2, rate = b, lower = 0, upper = 75)$value
int <- sapply(b_grid, function(b) {
1 - integrate(dgamma, shape = 100*b^2, rate = b, lower = 0, upper = 75)$value
})
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
int <- sapply(b_grid, function(b) {
1 - integrate(dgamma, shape = 100*b^2, rate = b, lower = 0, upper = 75)$value
})
which[int == 75]
which[int == 0.5]
int
int == 0.5
which[int == 0.5]
which(int == 0.5)
int
which.min(abs(int - 0.5))
int[which.min(abs(int - 0.5))]
b <- b_grid[which.min(abs(int - 0.5))]
b
a <- 100 * b^2
a
b
plot(lambda)
# Validate using Monte Carlo sampling
s <- 1e+6
lambda <- rgamma(n = s, shape = a, rate = b)
plot(lambda)
lambda
# Validate using Monte Carlo sampling
s <- 1e+6
lambda <- rgamma(n = s, shape = a, rate = b)
hist(lambda)
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
int <- sapply(b_grid, function(b) {
1 - integrate(dgamma, shape = 100*b^2, rate = b, lower = 0, upper = 75)$value
})
b <- b_grid[which.min(abs(int - 0.5))]
a <- 100 * b^2
# Validate using Monte Carlo sampling
s <- 1e+6
lambda <- rgamma(n = s, shape = a, rate = b)
hist(lambda)
a
b
# Approach (1): No integration
b_grid <- seq(0.01, 1, by = 0.0001)
med <- qgamma(0.5, 100*b_grid^2, b_grid)
b <- b_grid[which.min(abs(med - 75))]
a <- 100 * b^2
a
b
mean(lambda > 75)
var(lambda)
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
int <- sapply(b_grid, function(b) {
1 - integrate(dgamma, shape = 100*b^2, rate = b, lower = 0, upper = 75)$value
})
b <- b_grid[which.min(abs(int - 0.5))]
a <- 100 * b^2
# Validate using Monte Carlo sampling
s <- 1e+6
lambda <- rgamma(n = s, shape = a, rate = b)
hist(lambda)
mean(lambda > 75)
var(lambda)
# Approach (1): No integration
b_grid <- seq(0.01, 1, by = 0.00001)
med <- qgamma(0.5, 100*b_grid^2, b_grid)
# Approach (1): No integration
b_grid <- seq(0.01, 1, by = 0.00001)
med <- qgamma(0.5, 100*b_grid^2, b_grid)
b <- b_grid[which.min(abs(med - 75))]
a <- 100 * b^2
# Validate using Monte Carlo sampling
s <- 1e+6
lambda <- rgamma(n = s, shape = a, rate = b)
hist(lambda)
mean(lambda > 75)
var(lambda)
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
int <- sapply(b_grid, function(b) {
1 - integrate(dgamma, shape = 100*b^2, rate = b, lower = 0, upper = 75)$value
})
b <- b_grid[which.min(abs(int - 0.5))]
a <- 100 * b^2
# Validate using Monte Carlo sampling
s <- 1e+6
lambda <- rgamma(n = s, shape = a, rate = b)
hist(lambda)
mean(lambda > 75)
var(lambda)
hist(lambda, main = NA, xlab = "λ")
options("scipen")
hist(lambda, main = NA, xlab = "λ", ylab = "Frequency")
options(scipen = 5)
hist(lambda, main = NA, xlab = "λ", ylab = "Frequency")
s <- 1e+7
lambda <- rgamma(n = s, shape = a, rate = b)
hist(lambda, main = NA, xlab = "λ", ylab = "Frequency")
mean(lambda > 75)
var(lambda)
# Approach (1): No integration
b_grid <- seq(0.01, 1, by = 0.00001)
b_grid
med <- qgamma(0.5, 100*b_grid^2, b_grid)
hist(med)
abs(med - 75)
which.min(abs(med - 75)
)
which(med == 0)
med[which.min(abs(med - 75))]
b_grid[which.min(abs(med - 75))]
b <- b_grid[which.min(abs(med - 75))]
b
a <- 100 * b^2
a
qgamma(0.5, a, b)
# Approach (2): Using integration
b_grid <- seq(0.01, 1, by = 0.0001)
int <- sapply(b_grid, function(b) {
1 - integrate(dgamma, shape = 100*b^2, rate = b, lower = 0, upper = 75)$value
})
int
hist(int)
b <- b_grid[which.min(abs(int - 0.5))]
b
a <- 100 * b^2
1
a
b
n1 <- 2820
n2 <- 27
y1 <- 563
y2 <- 10
a <- b <- 0.1
s <- 1e+5
lambda1 <- rgamma(s, shape = y1 + a, rate = n1 + b)
lambda2 <- rgamma(s, shape = y2 + a, rate = n2 + b)
hist(lambda1)
plot(xs, p1)
xs <- seq(0, 1, by = 0.0001)
p1 <- dgamma(xs, shape = y1 + a, rate = n1 + b)
p2 <- dgamma(xs, shape = y2 + a, rate = n2 + b)
plot(xs, p1)
plot(xs, p1, type='l')
plot(xs, p1, type = 'l')
plot(xs, p1, type = 'l', ylim = range(p1, p2))
lines(xs, p)
lines(xs, p2)
plot(xs, p1, type = 'l', col = "blue", ylim = range(p1, p2))
plot(xs, p1, type = 'l', col = "blue", ylim = range(p1, p2))
lines(xs, p2, col = "red")
plot(xs, p1, type = 'l', col = "blue", lwd = 2, ylim = range(p1, p2))
lines(xs, p2, col = "red", lwd = 2)
legend("topright", inset = c(0.05, 0.05))
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"))
?legend
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"))
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"))
plot(xs, p1, type = 'l', col = "blue", lwd = 2, ylim = range(p1, p2))
lines(xs, p2, col = "red", lwd = 2)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"))
?legend
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1, lwd = 2)
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2))
lines(xs, p2, col = "red", lwd = 1.5)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1, lwd = 1.5)
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2),
xlab = "λ | Y", ylab = "Density")
lines(xs, p2, col = "red", lwd = 1.5)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1, lwd = 1.5)
xs <- seq(0, 1, by = 0.0001)
p1 <- dgamma(xs, shape = y1 + a, rate = n1 + b)
p2 <- dgamma(xs, shape = y2 + a, rate = n2 + b)
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2),
xlab = "λ | Y", ylab = "Posterior Density")
lines(xs, p2, col = "red", lwd = 1.5)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1, lwd = 1.5)
pdf("~/Documents/posteriors_baseball.pdf")
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2), xlab = "λ | Y", ylab = "Posterior Density")
lines(xs, p2, col = "red", lwd = 1.5)
dev.off()
library(latex2exp)
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2), xlab = latex2exp::TeX("\lambda \mid Y"), ylab = "Posterior Density")
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2), xlab = latex2exp::TeX("\\lambda \\mid Y"), ylab = "Posterior Density")
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2), xlab = latex2exp::TeX("\\lambda | Y"), ylab = "Posterior Density")
lines(xs, p2, col = "red", lwd = 1.5)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1, lwd = 1.5)
dev.off()
pdf("~/Documents/posteriors_baseball.pdf")
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2), xlab = latex2exp::TeX("\\lambda | Y"), ylab = "Posterior Density")
lines(xs, p2, col = "red", lwd = 1.5)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1, lwd = 1.5)
dev.off()
# Exercise 2.4.2
n1 <- 2820
n2 <- 27
y1 <- 563
y2 <- 10
a <- b <- 0.1
s <- 1e+5
lambda1 <- rgamma(s, shape = y1 + a, rate = n1 + b)
lambda2 <- rgamma(s, shape = y2 + a, rate = n2 + b)
plot(density(lambda1))
lines(density(lambda2))
print(mean(lambda2 > lambda1))
# Exercise 2.4.2
set.seed(42)
n1 <- 2820
n2 <- 27
y1 <- 563
y2 <- 10
a <- b <- 0.1
s <- 1e+5
lambda1 <- rgamma(s, shape = y1 + a, rate = n1 + b)
lambda2 <- rgamma(s, shape = y2 + a, rate = n2 + b)
plot(density(lambda1))
lines(density(lambda2))
print(mean(lambda2 > lambda1))
xs <- seq(0, 1, by = 0.0001)
p1 <- dgamma(xs, shape = y1 + a, rate = n1 + b)
p2 <- dgamma(xs, shape = y2 + a, rate = n2 + b)
pdf("~/Documents/posteriors_baseball.pdf")
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2), xlab = latex2exp::TeX("\\lambda | Y"), ylab = "Posterior Density")
lines(xs, p2, col = "red", lwd = 1.5)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1, lwd = 1.5)
dev.off()
plot(xs, p1, type = 'l', col = "blue", lwd = 1.5, ylim = range(p1, p2), xlab = latex2exp::TeX("\\lambda | Y"), ylab = "Posterior Density")
lines(xs, p2, col = "red", lwd = 1.5)
legend("topright", inset = c(0.05, 0.05), legend = c("Regular-Season", "World Series"),
col= c("blue", "red"), lty = 1, lwd = 1.5)
?abline
# RNG visualiztion from monte carlo
plot(lambda1, lambda2)
# RNG visualiztion from monte carlo
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1))
abline(a = 0, b = 1)
df <- data.frame(lambda1, lambda2)
df
dat$above <- lambda2 > lambda1
# RNG visualisation from monte carlo
dat <- data.frame(lambda1, lambda2)
dat$above <- lambda2 > lambda1
mean(dat$above)
print(mean(lambda2 > lambda1))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above)
abline(a = 0, b = 1)
dat$above <- as.factor(lambda2 > lambda1)
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above)
abline(a = 0, b = 1)
?pch
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, pch = 20)
abline(a = 0, b = 1)
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("\\lambda_w"))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("\\lambda\_w"), ylab = latex2exp::TeX("\\lambda_w"))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("\\lambda\\_w"), ylab = latex2exp::TeX("\\lambda_w"))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("\\lambda_{w}"), ylab = latex2exp::TeX("\\lambda_{r}"))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("\\lambda_{w}"), ylab = latex2exp::TeX("\\lambda_{r}"))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("$\\lambda_{w}$"), ylab = latex2exp::TeX("$\\lambda_{r}$"))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
pdf("~/Documents/prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1)
dev.off()
qnorm(p = 0.025)
qnorm(p = 0.975)
x <- seq(-4, 4, by = 0.001)
y <- dnorm(x)
plot(x, y)
plot(x, y, type="l")
abline(0.025, b = 0)
plot(x, y, type="l")
abline(v = -1.959964, col = "red")
abline(v = 1.959964, col = "red")
plot(x, y, type="l")
abline(v = 2, col = "red")
abline(v = -2, col = "red")
# Exercise 2.4.2
set.seed(42)
n1 <- 2820
n2 <- 27
y1 <- 563
y2 <- 10
a <- b <- 0.1
s <- 1e+5
lambda1 <- rgamma(s, shape = y1 + a, rate = n1 + b)
lambda2 <- rgamma(s, shape = y2 + a, rate = n2 + b)
print(mean(lambda2 > lambda1))
# RNG visualisation from monte carlo
dat <- data.frame(lambda1, lambda2)
dat$above <- as.factor(lambda2 > lambda1)
pdf("~/Documents/prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), col = dat$above, xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1)
dev.off()
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = dat$above, xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1)
dat$above <- factor(lambda2 > lambda1, labels = c("blue", "red"))
pdf("~/Documents/prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = dat$above, xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1)
dev.off()
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = dat$above, xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1)
getwd()
setwd("Github")
getwd()
dat$above <- factor(lambda2 > lambda1, labels = c("blue", "red"))
# RNG visualisation from monte carlo
dat <- data.frame(lambda1, lambda2)
dat$above <- factor(lambda2 > lambda1, labels = c("blue", "red"))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = dat$above, xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1)
abline(a = 0, b = 1, lwd = 2)
legend("topright", legend = c("Above line", "Below line"), col = "red", "blue")
legend("topright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = "red", "blue")
?legend
legend("topright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = c("red", "blue"))
?lty
?lwd
??lty
?plot
?abline
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1, lty = 2)
legend("topright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = c("red", "blue"))
setwd("STAE529M/homework2/")
pdf("prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1, lty = 2)
legend("topright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = c("red", "blue"))
dev.off()
pdf("prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
abline(a = 0, b = 1, lty = 2)
legend("topright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = c("red", "blue"))
dev.off()
pdf("prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
legend("topright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = c("red", "blue"))
abline(a = 0, b = 1, lty = 2)
dev.off()
legend("bottomright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = c("red", "blue"))
pdf("prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
legend("bottomright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = c("red", "blue"))
abline(a = 0, b = 1, lty = 2)
dev.off()
pdf("prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
legend("bottomright", inset = c(0.05, 0.05), pch = 20, legend = c(latex2exp::TeX("\\lambda_2 > \\lambda_1"), latex2exp::TeX("\\lambda_2 \\leq \\lambda_1")), col = c("red", "blue"))
abline(a = 0, b = 1, lty = 2)
dev.off()
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
legend("bottomright", inset = c(0.05, 0.05), pch = 20, legend = c(latex2exp::TeX("\\lambda_2 > \\lambda_1"), latex2exp::TeX("\\lambda_2 \\leq \\lambda_1")), col = c("red", "blue"))
abline(a = 0, b = 1, lty = 2)
pdf("prop_monte_carlo.pdf")
plot(lambda1, lambda2, xlim = c(0, 1), ylim = c(0,1), pch = 20, col = as.character(dat$above), xlab = latex2exp::TeX("$\\lambda_{r}$"), ylab = latex2exp::TeX("$\\lambda_{w}$"))
legend("bottomright", inset = c(0.05, 0.05), pch = 20, legend = c("Above line", "Below line"), col = c("red", "blue"))
abline(a = 0, b = 1, lty = 2)
dev.off()
ft <- dbeta(x = t, shape = a + Y, rate = b + m)
t <- seq(0, 1, by = 0.001)
ft <- dbeta(x = t, shape = a + Y, rate = b + m)
ft <- dbeta(x = t, shape1 = a + Y, shape2 = b + m)
m <- 5
Y <- 10
a <- b <- 1
t <- seq(0, 1, by = 0.001)
ft <- dbeta(x = t, shape1 = a + Y, shape2 = b + m)
plot(t, ft, type = "l")
